// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                  String                @id @default(uuid()) @map("_id")
    username            String                @unique
    password            String // hashed password
    email               String                @unique
    User                User[]
    Admin               Admin[]
    ShoppingCartManager ShoppingCartManager[]
    ProductManager      ProductManager[]
}

model User {
    id           String         @id @default(uuid()) @map("_id")
    info         Account        @relation(fields: [accountId], references: [id])
    accountId    String
    ShoppingCart ShoppingCart[]
    Order        Order[]
}

model Admin {
    id                  String                @id @default(uuid()) @map("_id")
    info                Account               @relation(fields: [accountId], references: [id])
    accountId           String
    shoppingCartManager ShoppingCartManager[]
    ProductManager      ProductManager[]
}

model ShoppingCartManager {
    id           String         @id @default(uuid()) @map("_id")
    accountId    String
    info         Account        @relation(fields: [accountId], references: [id])
    shoppingCart ShoppingCart[]
    adminId      String
    admin        Admin          @relation(fields: [adminId], references: [id])
}

// they have write access to products
model ProductManager {
    id        String    @id @default(uuid()) @map("_id")
    accountId String
    info      Account   @relation(fields: [accountId], references: [id])
    products  Product[]
    adminId   String
    admin     Admin     @relation(fields: [adminId], references: [id])
}

model Product {
    id               String         @id @default(uuid()) @map("_id")
    name             String
    description      String
    price            Float
    image            String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    carts            ShoppingCart[]
    orders           Order[]
    productManagerId String
    productManager   ProductManager @relation(fields: [productManagerId], references: [id])
}

model ShoppingCart {
    id        String              @id @default(uuid()) @map("_id")
    productId String
    quantity  Int
    product   Product             @relation(fields: [productId], references: [id])
    userId    String
    user      User                @relation(fields: [userId], references: [id])
    managerId String
    manager   ShoppingCartManager @relation(fields: [managerId], references: [id])
}

enum OrderStatus {
    PENDING
    PROCESSING
    DELIVERED
    CANCELLED
}

model Order {
    id        String      @id @default(uuid()) @map("_id")
    productId String
    quantity  Int
    product   Product     @relation(fields: [productId], references: [id])
    status    OrderStatus @default(PENDING)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    userId    String
    user      User        @relation(fields: [userId], references: [id])
    payment   Payment[]
    receipt   Receipt[]
}

// This is proof of concept for future use
model Payment {
    id        String   @id @default(uuid()) @map("_id")
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Receipt {
    id        String   @id @default(uuid()) @map("_id")
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
